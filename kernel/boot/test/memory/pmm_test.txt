/*
 * 内存模块伙伴系统检查代码。
 * @date 2025-02-04
 *
 * Copyright (c) 2025 Tony Chen Smith. All rights reserved.
 *
 * SPDX-License-Identifier: MIT
 */

/*
 * 物理内存管理调试。
 *
 * @return 无返回值。
 */
void boot_pmm_debug_dump(void)
{
	void plist(uintn list,uintn head,uintn tail);
	void pline(uintn index,uintn node,uintn start,uintn end,uintn amount,uintn type);
	for(uintn index=0;index<52;index++)
	{
		plist(index,boot_tree_head(buddy.pool,buddy.blocks[index]),boot_tree_tail(buddy.pool,buddy.blocks[index]));
		handle head=boot_tree_head(buddy.pool,buddy.blocks[index]);
		uintn i=0;
		while(head!=HANDLE_UNDEFINED)
		{
			physical_page_frame* nc=(physical_page_frame*)boot_bitmap_pool_content(buddy.pool,head);
			pline(i++,head,nc->base,nc->base+(nc->pages<<12)-1,nc->pages,page_frame_get_type(nc));
			head=boot_tree_next(buddy.pool,head);
		}
	}
	for(uintn index=0;index<3;index++)
	{
		plist(index+52,boot_tree_head(buddy.pool,used[index]),boot_tree_tail(buddy.pool,used[index]));
		handle head=boot_tree_head(buddy.pool,used[index]);
		uintn i=0;
		while(head!=HANDLE_UNDEFINED)
		{
			physical_page_frame* nc=(physical_page_frame*)boot_bitmap_pool_content(buddy.pool,head);
			pline(i++,head,nc->base,nc->base+(nc->pages<<12)-1,nc->pages,page_frame_get_type(nc));
			head=boot_tree_next(buddy.pool,head);
		}
	}
}

/*
 * 物理内存管理内存申请释放测试。
 *
 * @return 无返回值。
 */
extern void boot_pmm_debug_test(void)
{
	extern void prints(const char* src);
	extern void print_num(uintn number);
	extern void print_hex(uintn number);
	prints("===Module aos.boot.memory Test===\ncurrent buddy:\n");
	boot_pmm_debug_dump();
	prints("===Test start===\n");
	uintn tp=1;
	for(uintn index=0;index<19;index++)
	{
		prints("test pages:");
		print_num(tp);
		prints("\nalloc max:[0x");
		print_hex(0);
		prints(",0x");
		print_hex(0x3FFFFFFF);
		prints("]=0x");
		uintn tb=boot_pmm_alloc(MALLOC_MAX,0,0x3FFFFFFF,tp,AOS_KERNEL_DATA,0);
		print_hex(tb);
		prints("\n");
		if(tb==HANDLE_UNDEFINED)
		{
			prints("alloc max fault.\n");
		}
		else
		{
			boot_pmm_free(tb);
		}
		prints("alloc min:[0x");
		print_hex(0x40000000);
		prints(",0x");
		print_hex(0xFFFFFFFF);
		prints("]=0x");
		tb=boot_pmm_alloc(MALLOC_MIN,0x40000000,0xFFFFFFFF,tp,AOS_KERNEL_DATA,0);
		print_hex(tb);
		prints("\n");
		if(tb==HANDLE_UNDEFINED)
		{
			prints("alloc min fault.\n");
		}
		else
		{
			boot_pmm_free(tb);
		}
		prints("alloc range:[0x");
		print_hex(0x40000000);
		prints(",0x");
		print_hex(0x14FFFFFFFF);
		prints("]=0x");
		tb=boot_pmm_alloc(MALLOC_RANGE,0x40000000,0x14FFFFFFFF,tp,AOS_KERNEL_DATA,0);
		print_hex(tb);
		prints("\n");
		if(tb==HANDLE_UNDEFINED)
		{
			prints("alloc range fault.\n");
		}
		else
		{
			boot_pmm_free(tb);
		}
		prints("alloc any:[0x");
		print_hex(0x40000000);
		prints(",0x");
		print_hex(0x14FFFFFFFF);
		prints("]=0x");
		tb=boot_pmm_alloc(MALLOC_ANY,0x40000000,0x14FFFFFFFF,tp,AOS_KERNEL_DATA,0);
		print_hex(tb);
		prints("\n");
		if(tb==HANDLE_UNDEFINED)
		{
			prints("alloc any fault.\n");
		}
		else
		{
			boot_pmm_free(tb);
		}
		prints("===\n");
		boot_pmm_debug_dump();
		prints("===\n");
		tp=(tp<<1)+1;
	}
}