#
# Copyright (c) 2024-2025 Tony Chen Smith. All rights reserved.
#
# SPDX-License-Identifier: MIT
#

set(CMAKE_SYSTEM_NAME Generic)
set(CMAKE_SYSTEM_PROCESSOR x86_64)

set_property(GLOBAL PROPERTY TARGET_SUPPORTS_SHARED_LIBS TRUE)

set(CMAKE_SYSTEM_INCLUDE_PATH)
set(CMAKE_SYSTEM_LIBRARY_PATH)
set(CMAKE_SYSTEM_PROGRAM_PATH)

set(CMAKE_SHARED_LIBRARY_PREFIX "lib")
set(CMAKE_SHARED_LIBRARY_SUFFIX ".so")
set(CMAKE_SHARED_MODULE_PREFIX "lib")
set(CMAKE_SHARED_MODULE_SUFFIX ".so")
set(CMAKE_IMPORT_LIBRARY_PREFIX "lib")
set(CMAKE_IMPORT_LIBRARY_SUFFIX ".a")
set(CMAKE_EXECUTABLE_SUFFIX "e")
set(CMAKE_FIND_LIBRARY_PREFIXES "lib")
set(CMAKE_FIND_LIBRARY_SUFFIXES ".a")

set(CMAKE_SYSTEM_INCLUDE_PATH ${CMAKE_SOURCE_DIR}/include)
set(CMAKE_SYSTEM_LIBRARY_PATH ${CMAKE_SOURCE_DIR}/lib)
set(CMAKE_SYSTEM_PROGRAM_PATH ${CMAKE_SOURCE_DIR}/bin)

set(CMAKE_C_COMPILER clang)
set(CMAKE_C_COMPILER_WORKS ON)

set(CMAKE_C_COMPILE_OPTIONS_PIC "-fPIC")
set(CMAKE_C_COMPILE_OPTIONS_PIE "-fPIE")
set(CMAKE_SHARED_LIBRARY_C_FLAGS "-fPIC")

set(CMAKE_LINKER_TYPE LLD)
set(CMAKE_C_USING_LINKER_LLD ld.lld)
set(CMAKE_C_USING_LINKER_MODE TOOL)

set(CMAKE_ASM_NASM_COMPILER nasm)

set(CMAKE_C_COMPILER_ID Clang)
set(CMAKE_C_SIMULATE_ID Clang)
set(CMAKE_C_COMPILER_LINKER_ID LLD)

set(CMAKE_C_STANDARD 11)
set(CMAKE_C_EXTENSIONS OFF)

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(CMAKE_INCLUDE_HEADERS_IN_COMPILE_COMMANDS ON)

set(CMAKE_C_ARCHIVE_CREATE "<CMAKE_AR> qc <TARGET> <LINK_FLAGS> <OBJECTS>")
set(CMAKE_C_ARCHIVE_APPEND "<CMAKE_AR> q <TARGET> <LINK_FLAGS> <OBJECTS>")
set(CMAKE_C_ARCHIVE_FINISH "<CMAKE_RANLIB> <TARGET>")
set(CMAKE_C_CREATE_SHARED_LIBRARY "<CMAKE_LINKER> <LANGUAGE_COMPILE_FLAGS> <CMAKE_SHARED_LIBRARY_C_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS> --shared --oformat=elf -o <TARGET> ${CMAKE_GNULD_IMAGE_VERSION} <OBJECTS> <LINK_LIBRARIES>")
set(CMAKE_C_CREATE_SHARED_MODULE "<CMAKE_LINKER> <LANGUAGE_COMPILE_FLAGS> <CMAKE_SHARED_MODULE_C_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_MODULE_CREATE_C_FLAGS> --shared --oformat=elf -o <TARGET> ${CMAKE_GNULD_IMAGE_VERSION} <OBJECTS> <LINK_LIBRARIES>")
set(CMAKE_C_LINK_EXECUTABLE "<CMAKE_LINKER> <CMAKE_C_LINK_FLAGS> <LINK_FLAGS> <OBJECTS> --oformat=elf -o <TARGET> ${CMAKE_GNULD_IMAGE_VERSION} <LINK_LIBRARIES>")
set(CMAKE_C_COMPILER_TARGET x86_64-pc-unknown-unknown)

set(CMAKE_ASM_NASM_SOURCE_FILE_EXTENSIONS nasm)
set(CMAKE_ASM_NASM_OBJECT_FORMAT elf64)
set(CMAKE_ASM_NASM_COMPILE_OBJECT "<CMAKE_ASM_NASM_COMPILER> <DEFINES> <INCLUDES> <FLAGS> -f ${CMAKE_ASM_NASM_OBJECT_FORMAT} -o <OBJECT> <SOURCE>")

set(CMAKE_ASM_NASM_FLAGS_DEBUG "${CMAKE_ASM_NASM_FLAGS} -g -DDEBUG")
set(CMAKE_ASM_NASM_FLAGS_MINSIZEREL "${CMAKE_ASM_NASM_FLAGS} -Ox -DNDEBUG")
set(CMAKE_ASM_NASM_FLAGS_RELEASE "${CMAKE_ASM_NASM_FLAGS} -Ox -DNDEBUG")
set(CMAKE_ASM_NASM_FLAGS_RELWITHDEBINFO "${CMAKE_ASM_NASM_FLAGS} -Ox -g -DNDEBUG")

set(CMAKE_C_FLAGS "-m64 -flto -nostdlibinc -mno-red-zone -ffreestanding -fjump-tables")
set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -DDEBUG")

add_link_options("-nostdlib" "--library-path=${CMAKE_SOURCE_DIR}/lib" "--library=rtbuiltins" "--no-dynamic-linker")

set(CMAKE_OBJDUMP llvm-objdump)
set(CMAKE_READOBJ llvm-readobj)

cmake_policy(SET CMP0083 NEW)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

#添加AOS目标
function(add_aos_target TARGET_FILE)
	get_filename_component(TARGET_NAME ${TARGET_FILE} NAME)

	add_custom_target(
		${TARGET_NAME}.d.txt
		ALL
		COMMAND ${CMAKE_OBJDUMP} --all-headers --full-contents -l --x86-asm-syntax=intel -d ${TARGET_FILE} ">" ${TARGET_FILE}.d.txt
		DEPENDS ${TARGET_FILE}
		COMMENT "Disassemble ${TARGET_NAME}"
	)

	add_custom_target(
		${TARGET_NAME}.h.txt
		ALL
		COMMAND ${CMAKE_READOBJ} --all --program-headers -g --gnu-hash-table -d ${TARGET_FILE} ">" ${TARGET_FILE}.h.txt
		DEPENDS ${TARGET_FILE}
		COMMENT "Read the ELF heads of ${TARGET_NAME}"
	)
endfunction()

#复制AOS目标
function(copy_aos_target OUTPUT_DIR SRC_FILE)
	get_filename_component(GROUP_NAME ${OUTPUT_DIR} NAME)
	get_filename_component(SRC_NAME ${SRC_FILE} NAME)

	add_custom_target(
		copy_${GROUP_NAME}_${SRC_NAME}
		ALL
		COMMAND ${CMAKE_COMMAND} -E copy_if_different ${OUTPUT_DIR}/${SRC_FILE} ${OUTPUT_DIR}/${SRC_NAME}
		DEPENDS ${OUTPUT_DIR}/${SRC_FILE}
		COMMENT "Copy ${SRC_NAME} to the ${GROUP_NAME} directory."
	)
endfunction()