/*
 * 内存模块红黑树检查代码。仅一部分。
 * @date 2025-01-05
 *
 * Copyright (c) 2025 Tony Chen Smith. All rights reserved.
 *
 * SPDX-License-Identifier: MIT
 */

/*测试输入*/
static int input[]={18,25,15,6,13,37,27,17,34,9,10,23};

/*伪池和伪根结点*/
static bitmap_pool* pool;
static handle rbroot=HANDLE_UNDEFINED;

/*对两个物理页框的base进行比较的比较函数*/
static int test0(handle a,handle b)
{
	physical_page_frame* ac=(physical_page_frame*)a;
	physical_page_frame* bc=(physical_page_frame*)b;
	return ac->base-bc->base;
}

/*对物理页框的base和参考值进行比较的函数*/
static int test1(handle a,handle b)
{
	physical_page_frame* ac=(physical_page_frame*)a;
	return ac->base-b;
}

/*初始化一个伪页框*/
static handle test(int new)
{
	handle result=boot_bitmap_pool_alloc(pool);
	physical_page_frame* rc=boot_bitmap_pool_content(pool,result);
	rc->node.parent=HANDLE_UNDEFINED;
	rc->node.left=HANDLE_UNDEFINED;
	rc->node.right=HANDLE_UNDEFINED;
	rc->node.color=TREE_RED;
	rc->base=new;
	return result;
}

/*打印树的中序遍历*/
void dump_node(handle node)
{
	physical_page_frame* nc=boot_bitmap_pool_content(pool,node);
	prints("[");
	if(nc->node.left!=HANDLE_UNDEFINED)
	{
		dump_node(nc->node.left);
		prints(",");
	}
	prints("(");
	if(nc->node.color)
	{
		prints("R,");
	}
	else
	{
		prints("B,");
	}
	print_num(nc->base);
	prints(")");
	if(nc->node.right!=HANDLE_UNDEFINED)
	{
		prints(",");
		dump_node(nc->node.right);
	}
	prints("]");
}

/*测试用入口函数*/
extern void boot_init_memory_step0(boot_params* restrict param,const boot_base_functions* restrict bbft)
{
	/*设置基础功能*/
	bf=(boot_base_functions*)bbft;
	prints("hello,aos\n");

	/*初始化伪池*/
	uintn base=(((uintn)param->current_pointer>>12)+((uintn)param->current_pointer&0xFFF?1:0))<<12;
	if((uintn)param->pool+param->pool_length-base<BOOT_PMP_SIZE)
	{
		/*可用内存不足，可能是参数设置问题，也有可能是预设内存池大小问题*/
		DEBUG_START
		/*错误：引导器预设内存池空间不足以分配该数目的物理页框结点，请尝试重新配置BOOT_PHYSICAL_MEMORY_POOL。系统因此将在此处关机。*/
		#define BOOT_PM_ERROR_MSG "Error:Test need more memory.\n"
		bbft->boot_writeport(BOOT_PM_ERROR_MSG,PORT_WIDTH_8,QEMU_DEBUGCON,sizeof(BOOT_PM_ERROR_MSG)-1);
		DEBUG_END
		bbft->boot_ms_call_4(param->runtime->reset_system,EFI_RESET_SHUTDOWN,EFI_OUT_OF_RESOURCES,0,0);
		__builtin_unreachable();
	}
	param->current_pointer=(void*)(base+BOOT_PMP_SIZE);
	boot_bitmap_pool_init((void*)base,BOOT_PHYSICAL_MEMORY_POOL,sizeof(physical_page_frame),bbft);
	pool=(bitmap_pool*)base;

	/*测试插入*/
	prints("test rbtree\ncurrent node:");
	print_num(pool->free);
	prints("\n");
	for(int index=0;index<12;index++)
	{
		handle a=test(input[index]);
		boot_tree_insert(pool,&rbroot,test0,a);
		dump_node(rbroot);
		prints("\n");
	}
	prints("current node:");
	print_num(pool->free);
	prints("\n");

	/*测试删除*/
	prints("delete test\n");
	for(int index=0;index<12;index++)
	{
		prints("delete:");
		print_num(input[index]);
		prints("\n");
		handle a=boot_tree_find(pool,&rbroot,test1,input[index]);
		prints("delete node:");
		print_num(a);
		prints("\n");
		boot_tree_remove(pool,&rbroot,a);
		if(rbroot!=HANDLE_UNDEFINED)
		{
			dump_node(rbroot);
			prints("\n");
		}
		else
		{
			prints("(null)\n");
		}
		boot_bitmap_pool_free(pool,a);
	}
	prints("current node:");
	print_num(pool->free);
	prints("\n");
	while(1)
	{
		__asm__("hlt"::);
	}
	__builtin_unreachable();
}